/* TLS Hello Extensions */

Extensions format is:
    struct {
        ExtensionType extension_type;
        opaque extension_data<0..2^16-1>; // Single-byte entities containing uninterpreted data are of type opaque.
    } Extension;

    - "extension_type" identifies the particular extension type.
    - "extension_data" contains information specific to the particular extension type.

    enum {
        server_name(0), 
        max_fragment_length(1), 
        client_certificate_url(2), 
        trusted_ca_keys(3),
        truncated_hmac(4), 
        status_request(5),
        user_mapping(6),
        client_authz(7),
        server_authz(8), 
        cert_type(9), 
        supported_groups(10), 
        ec_point_formats(11),
        srp(12),
        signature_algorithms(13), 
        use_srtp(14), 
        heartbeat(15),
        application_layer_protocol_negotiation(16), 
        status_request_v2(17), 
        signed_certificate_timestamp(18), 
        client_certificate_type(19),
        server_certificate_type(20), 
        padding(21), 
        encrypt_then_mac(22), 
        extended_master_secret(23),
        token_binding(24), 
        cached_info(25), 
        session_ticket(35), 
        renegotiation_info(65281), (65535)
    } ExtensionType;
    **The above extension type is the extension type that joy can extract at present**, 
    More extension type references https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml

refs:
    https://tools.ietf.org/html/rfc5246  tls1.2
    https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml tls extension type


/* TCP  Extension: */

TCP Options may occupy space at the end of the TCP header and are a
multiple of 8 bits in length.  All options are included in the
checksum.  An option may begin on any octet boundary.  There are two
cases for the format of an option:

    Case 1:  A single octet of option-kind.

    Case 2:  An octet of option-kind, an octet of option-length, and
            the actual option-data octets.

Currently defined options include (kind indicated in octal)
    Kind    Length    Meaning  
    ----    ------    -------
     0        -       End of option list(NOL)
     1        -       No-operation(NOP)
     2        4       Maximum Segment Size(WSS)
     3        3       Window Scale Option(WSopt) 
     4        2       Sack-Permitted 
     5     variable   SACK
     8        10      Timestamps Option(TSopt)
     28       4       User Timeout Option(UTO)
     29    variable   TCP Authentication Option(TCP-AO)
     253   variable   reserved for experimentation
     254   variable   reserved for experimentation

**joy only deals with NOL, NOP, WSS, Sack-Permitted and TSopt option.**

Example for two case of specific option definitions
    End of Option list for case 1:
        +--------+
        |00000000|
        +--------+
          Kind=0

    Maximum Segment Size for case 2:
        +--------+--------+---------+--------+
        |00000010|00000100|   max seg size   |
        +--------+--------+---------+--------+
         Kind=2   Length=4

refs:
    https://tools.ietf.org/html/rfc793 
    https://tools.ietf.org/html/rfc1323
    https://tools.ietf.org/html/rfc2018
    https://tools.ietf.org/html/rfc5482
    https://tools.ietf.org/html/rfc5925
    https://tools.ietf.org/html/rfc4727


/* DHCP Extensions */

The DHCP options are comprised of two formats.  Those that
have no data consist of a single tag octet and are implicitly
of one-octet length(only for Pad and End options), while those that contain data consist of
one tag octet, one length octet, and length octets of data.

example for first format without data:

     Code
    +-----+
    |  0  |
    +-----+
example for sencond format with data:

    Code   Len        Subnet Mask
   +-----+-----+-----+-----+-----+-----+
   |  1  |  4  |  m1 |  m2 |  m3 |  m4 |
   +-----+-----+-----+-----+-----+-----+

All DHCP option can be refered to https://www.iana.org/assignments/bootp-dhcp-parameters/bootp-dhcp-parameters.xhtml,
and Joy can only handle most of the options, which have the following code field values or ranges
    (code <= 83) || 
    (code >= 85 && code <= 95) ||
    (code >= 97 && code <= 101) || 
    (code >= 112 && code <= 125) ||
    (code >= 136 && code <= 142) || 
    (code >= 144 && code <= 146) ||
    (code >= 150 && code <= 161) || 
    (code >= 150 && code <= 161) ||
    (code >= 175 && code <= 177) || 
    (code >= 208 && code <= 213) ||
    (code == 220) || 
    (code == 221) || 
    (code == 255)



In addition, joy defines a string for each option to be processed, and uses the string as the key of 
the option attribute in the DHCP feature to identify each option.
Joy defines them in an array. The index of the array is the code value corresponding to the option
The definition is as followsï¼š
    static const char *dhcp_option_types[] = {
        [0]="pad", [1]="subnet_mask", [2]="time_offset", [3]="router",
        [4]="time_server", [5]="name_server", [6]="domain_server", [7]="log_server",
        [8]="quotes_server", [9]="lpr_server", [10]="impress_server", [11]="rlp_server",
        [12]="hostname", [13]="boot_file_size", [14]="merit_dump_file", [15]="domain_name",
        [16]="swap_server", [17]="root_path", [18]="extension_file", [19]="forward_on_off",
        [20]="src_rte_on_off", [21]="policy_filter", [22]="max_dg_assembly", [23]="default_ipttl",
        [24]="mtu_timeout", [25]="mtu_plateau", [26]="mtu_interface", [27]="mtu_subnet",
        [28]="broadcast_address", [29]="mask_discovery", [30]="mask_supplier", [31]="router_discovery",
        [32]="router_request", [33]="static_route", [34]="trailers", [35]="arp_timeout",
        [36]="ethernet", [37]="default_tcpttl", [38]="keepalive_time", [39]="keepalive_data",
        [40]="nis_domain", [41]="nis_servers", [42]="ntp_servers", [43]="vendor_specific",
        [44]="netbios_name_srv", [45]="netbios_dist_srv", [46]="netbios_node_type", [47]="netbios_scope",
        [48]="xwindow_font", [49]="xwindow_manager", [50]="address_request", [51]="address_time",
        [52]="overload", [53]="msg_type", [54]="server_id", [55]="parameter_list",
        [56]="message", [57]="max_msg_size", [58]="renewal_time", [59]="rebinding_time",
        [60]="class_id", [61]="client_id", [62]="netWare_ip_domain", [63]="netware_ip_option",
        [64]="nis_domain_name", [65]="nis_server_addr", [66]="server_name", [67]="bootfile_name",
        [68]="home_agent_addrs", [69]="smtp_server", [70]="pop3_server", [71]="nntp_server",
        [72]="www_server", [73]="finger_server", [74]="irc_server", [75]="street_talk_server",
        [76]="stda_server", [77]="user_class", [78]="directory_agent", [79]="service_scope",
        [80]="rapid_commit", [81]="client_fqdn", [82]="relay_agent_information", [83]="isns",
        [85]="nds_servers", [86]="nds_tree_name", [87]="nds_context",
        [88]="bcmcs_controller_domain_name_list", [89]="bcmcs_controller_ipv4_address",
        [90]="authentication", [91]="client_last_transaction_time",
        [92]="associated_ip", [93]="client_system", [94]="client_ndi", [95]="ldap",
        [97]="uuid_guid", [98]="user_auth", [99]="geoconf_civic",
        [100]="pcode", [101]="tcode",
        [112]="netinfo_address", [113]="netinfo_tag", [114]="url",
        [116]="auto_config", [117]="name_service_search", [118]="subnet_selection",
        [119]="domain_search", [120]="sip_servers", [121]="classless_static_route", [122]="ccc",
        [123]="geo_conf", [124]="vendor_class", [125]="vendor_specific_information",
        [136]="option_pana_agent", [137]="option_v4_lost", [138]="option_capwap_ac_v4",
        [139]="option_ipv4_address_mos",
        [140]="option_ipv4_fqdn_mos", [141]="sip_ua_configuration_service_domains",
        [142]="option_ipv4_address_andsf",
        [144]="geo_loc", [145]="forcerenew_nonce_capable", [146]="rdnss_selection",
        [150]="tftp_server_address|etherboot|grub_configuration_path_name", [151]="status_code",
        [152]="base_time", [153]="start_time_of_state",
        [154]="query_start_time", [155]="query_end_time",
        [156]="dhcp_state", [157]="data_source",
        [158]="option_v4_pcp_server", [159]="option_v4_portparams",
        [160]="captive_portal", [161]="option_mud_url_v4",
        [175]="etherboot",
        [176]="ip_telephone", [177]="etherboot|packetcable_cablehome",
        [208]="pxelinux_magic", [209]="configuration_file", [210]="path_prefix", [211]="reboot_time",
        [212]="option_6rd", [213]="option_v4_access_domain",
        [220]="subnet_allocation", [221]="virtual_subnet_selection",
        [255]="end"
    };

refs: 
    https://www.iana.org/assignments/bootp-dhcp-parameters/bootp-dhcp-parameters.xhtml



